answercopy(rdf,itr_rdf)
length(rdf)
load_all()
answercopy(rdf,itr_rdf)
x$rdf
rbind.data.frame(rdf,itr_rdf)
y=answercopy(rdf,itr_rdf)
common_correct=y[[1]]
common_incorrect_differentoptions=y[[2]]
lapply(common_incorrect_differentoptions, if(x==10000{NA}))
lapply(common_incorrect_differentoptions)
load_all()
answercopy(rdf,itr_rdf)
0==NA
itempreknow(itr_rdf)
systematiccheating(itr_rdf)
load_all()
systematiccheating(itr_rdf)
itr_rdf[,-p_scor]
View(itr_rdf)
load_all()
k_index_response_similarity_2(itr_rdf,rdf,1:100,c(1,2))
``
load_all()
k_index_response_similarity_2(itr_rdf,rdf,1:100,c(1,2))
load_all()
k_index_response_similarity_2(itr_rdf,rdf,1:100,c(1,2))
load_all()
k_index_response_similarity_2(itr_rdf,rdf,1:100,c(1,2))
khelper<-function(df){
out_df <- expand_grid(copier_id = sid,
subgroup_id = sid) %>%
filter(copier_id %in% suspect_pairs$copier_id)
out_df
}
k_index_response_similarity_2 <- function(data, data2, item.loc, suspect_pairs){
n_items = length(item.loc)
data %>%
mutate(across(.cols = item.loc,.fns = ~(.x == 0)),
row_id = sid) %>%
column_to_rownames(var = 'row_id') %>%
dplyr::select(sid, item.loc) -> is_response_incorrect_df
data2 %>%
dplyr::select(sid, item.loc) %>%
column_to_rownames(var = 'sid') %>%
as.matrix() -> raw_responses
is_response_incorrect_df %>%
mutate(n_incorrect = rowSums(is_response_incorrect_df[,2:(n_items+1)], na.rm = TRUE)) %>%
dplyr::select(sid, n_incorrect) -> n_incorrect_df
n_incorrect_df %>%
group_by(n_incorrect) %>%
group_split() %>%
map_dfr(khelper) -> subgroup_df
suspect_pairs %>%
mutate(chunk = ceiling(row_number()/20)) %>%
split(.$chunk) -> pairs_list
map_dfr(pairs_list, function(pairs){
print(paste0('Progress:',100*as.numeric(pairs$chunk[1])/length(pairs_list), '%'))
pairs %>%
inner_join(subgroup_df, by = 'copier_id') %>%
mutate(common_incorrect = rowSums(((raw_responses[as.character(subgroup_id), ] == raw_responses[as.character(source_id), ]) & is_response_incorrect_df[as.character(source_id),2:(n_items+1)]), na.rm = T)) %>%
group_by(copier_id,source_id) %>%
summarise(avg_common_incorrect = mean(common_incorrect)) %>%
ungroup() %>%
left_join(n_incorrect_df %>%
rename(w_s=n_incorrect), by = c('source_id' = 'sid')) %>%
mutate(m = rowSums(((raw_responses[as.character(copier_id), ] == raw_responses[as.character(source_id), ]) & is_response_incorrect_df[as.character(source_id),2:(n_items+1)]), na.rm = T),
p = avg_common_incorrect/w_s,
k.index = 1-pbinom(m-1,w_s,p)) %>%
dplyr::select(copier_id,source_id,k.index) %>%
filter(k.index<=0.01) -> output
output
}) -> res
res
}
load_all()
k_index_response_similarity_2(itr_rdf,rdf,1:100,c(1,2))
install.packages("CopyDetect")
load_all()
optimal_k_index_response_similarity(rdf)
datagen(N=1000,no_centres=10,no_question=100)
load_all()
datagen(n=100,no_centres=10,no_question=100)
datagen(n=100,no_centres=10,no_question=100)
load_all()
datagen(n=100,no_centres=10,no_question=100)
load_all()
datagen(n=100,no_centres=10,no_question=100)
load_all()
datagen(n=100,no_centres=10,no_question=100)
load_all()
x=datagen(n=100,no_centres=10,no_question=100)
rdf=x[[1]]
optimal_k_index_response_similarity(rdf,1:100,c(1,2))
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
load_all()
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
load_all()
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
install.packages("naniar")
load_all()
load_all()
load_all()
datagen()
load_all()
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
datagen()
View(rdf)
rdf=x[[1]]
itr_rdf=x[[2]]
View(rdf)
View(itr_rdf)
x=datagen()
rdf=x[[1]]
itr_rdf=x[[2]]
load_all()
x=datagen()
itr_rdf=x[[2]]
rdf=x[[1]]
load_all()
x=datagen()
rdf=x[[1]]
itr_rdf=x[[2]]
View(itr_rdf)
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
load_all()
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
is_response_incorrect_df
load_all()
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
load_all()
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
answercopy(rdf,itr_rdf)
answercopy(rdf,itr_rdf)
load_all()
answercopy(rdf,itr_rdf)
load_all()
answercopy(rdf,itr_rdf)
load_all()
answercopy(rdf,itr_rdf)
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
itr_rdf %>%
mutate(across(.cols = 1:100,.fns = ~(.x == 0)),
row_id = sid) %>%
column_to_rownames(var = 'row_id') %>%
dplyr::select(sid, item.loc) -> is_response_incorrect_df
itr_rdf %>%
mutate(across(.cols = 1:100,.fns = ~(.x == 0)),
row_id = sid) %>%
column_to_rownames(var = 'row_id')
View(itr_rdf %>%
mutate(across(.cols = 1:100,.fns = ~(.x == 0)),
row_id = sid) %>%
column_to_rownames(var = 'row_id'))
View(itr_rdf %>%
mutate(across(.cols = 1:100,.fns = ~(.x == 0)),
row_id = sid) %>%
column_to_rownames(var = 'row_id') %>% select(sid,1:100))
View(itr_rdf %>%
mutate(across(.cols = 1:100,.fns = ~(.x == 0)),
row_id = sid) %>%
column_to_rownames(var = 'row_id') %>% select(sid,c(1:100))
)
c(1,28:31)
View(itr_rdf %>%
mutate(across(.cols = 1:100,.fns = ~(.x == 0)),
row_id = sid) %>%
column_to_rownames(var = 'row_id') %>% select(c(1:100)))
View(itr_rdf %>%
mutate(across(.cols = 1:100,.fns = ~(.x == 0))) %>%
column_to_rownames(var = "sid"))
v1:v50
v1:v50
paste0(V,c(1:100))
print(paste0(V,c(1:100)))
1+1
lapply(1:100, x+1)
lapply(1:100, x+1)
View(itr_rdf %>%
mutate(across(.cols = 1:100,.fns = ~(.x == 0)),
row_id = sid) %>%
column_to_rownames(var = 'row_id') )
View(itr_rdf %>%
mutate(across(.cols = 1:100,.fns = ~(.x == 0)),
row_id = sid) %>%
column_to_rownames(var = 'row_id') %>% select(sid) )
View(itr_rdf %>%
mutate(across(.cols = 1:100,.fns = ~(.x == 0)),
row_id = sid) %>%
column_to_rownames(var = 'row_id') %>% select("sid") )
zxc=(itr_rdf %>%
mutate(across(.cols = 1:100,.fns = ~(.x == 0)),
row_id = sid) %>%
column_to_rownames(var = 'row_id') )
zxc %>% select(sid)
View(zxc %>% select(sid))
View(zxc %>% as_tibble() %>% select(sid))
View(zxc %>% as_tibble() %>% select(sid ))
View(zxc %>% as_tibble() %>% dplyr::select(sid ))
View(zxc %>% as_tibble() %>% dplyr::select(sid,1:100 ))
View(itr_rdf %>%
mutate(across(.cols = item.loc,is.na),
row_id = sid) %>%
column_to_rownames(var = 'row_id'))
View(itr_rdf %>%
mutate(across(.cols = item.loc,.funs=is.na),
row_id = sid) %>%
column_to_rownames(var = 'row_id'))
View(itr_rdf %>%
mutate(across(.cols = item.loc,.fns=is.na),
row_id = sid) %>%
column_to_rownames(var = 'row_id'))
View(itr_rdf %>%
mutate(across(.cols = item.loc,.fns=~is.na),
row_id = sid) %>%
column_to_rownames(var = 'row_id'))
View(itr_rdf %>%
mutate(across(.cols = 1:100,.fns=~(is.na)),
row_id = sid) %>%
column_to_rownames(var = 'row_id'))
View(itr_rdf %>%
mutate(across(.cols = 1:100,.fns=is.na),
row_id = sid) %>%
column_to_rownames(var = 'row_id'))
View(itr_rdf %>%
mutate(across(.cols = 1:100,.fns=is.na),
row_id = sid) %>%
column_to_rownames(var = 'row_id')%>%
dplyr::select(sid,1:100))
load_all()
optimal_k_index_response_similarity(itr_rdf)
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
library(dtplyr)
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
library(devtools)
load_all()
x=datagen()
rdf=x[[1]]
itr_rdf=x[[2]]
abberrantresponse(itr_rdf,rdf)
abberrantresponse(itr_rdf)
itr_rdf[is.na(itr_rdf)]
itr_rdf[is.na(itr_rdf)]=0
View(itr_rdf)
abberrantresponse(itr_rdf)
x=datagen()
itr_rdf=x[[2]]
rdf=x[[1]]
load_all()
abberrantresponse(itr_rdf)
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
load_all()
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
load_all()
load_all()
optimal_k_index_response_similarity(itr_rdf,1:100,c(1,2))
c(1,2) %>% mutate(chunk=1)
optimal_k_index_response_similarity(itr_rdf,1:100,rdf)
optimal_k_index_response_similarity(itr_rdf,1:100,tibble(copier_id = 1,
source_id =2))
answercopy(rdf,itr_rdf)
y=answercopy(rdf,itr_rdf)
cc=y[[1]]
View(cc)
cis=y[[2]]
cc+cis
View(cc+cis)
View((cc+cis)>10)
View((cc+cis)>10)
load_all()
y=answercopy(rdf,itr_rdf)
library(devtools)
usethis::use_data(answercopy)
usethis::use_data(answercopy)
load_all()\
load_all()
load_all()
test()
check()
devtools::document()
abberrantresponse(rdf,itr_rdf)
load_all()
x=datagen()
abberrantresponse(x$rdf,x$itr_rdf)
abberrantresponse(x$itr_rdf,x$rdf)
abberrantresponse(x$itr_rdf)
abberrantresponse(x$itr_rdf,cutoff=0.02)
abberrantresponse(x$itr_rdf,cutoff=0.5)
abberrantresponse(x$itr_rdf,cutoff=0)
abberrantresponse(x$itr_rdf,cutoff=1)
abberrantresponse(x$itr_rdf,cutoff=0.0002)
systematiccheating(x$itr_rdf)
itr_rdf %>%
mutate(across(.cols = 1:100,.fns = ~(.x == 0)),
row_id = sid) %>%
column_to_rownames(var = 'row_id') %>%
dplyr::select(sid, 1:100) -> is_response_incorrect_df
devtools::document()
load_all()
optimal_k_index_response_similarity(itr_rdf,1:100,tibble(copier_id=1,source_id=2))
library(devtools)
devtools::document()
load_all()
library(ltm)
library(tidyverse)
# ?ltm::rmvlogis
#
# diffs <- as.matrix(seq(-2, 2, by = 1))
# discrs <- as.matrix(rep(1, 5))
# params <- cbind(diffs, discrs)
#
# dat <- rmvlogis(1000, params)
#
# mod <- ltm(dat ~ z1)
# mod
#
# factor.scores(mod)
## test design
## 20 question test
# 10 questions hard
# 10 easy
# hard questions diff range 1 -- 3
# easy question diff range -3 -- -1
set.seed(1700)
# hard questions
diffs1 <- as.matrix(runif(10, 1, 3))
diffs2 <- as.matrix(runif(10, -3, -1))
discrs <- as.matrix(rep(1, 20))
params <- cbind(rbind(diffs1, diffs2), discrs)
n1 <- 4000 # control dataset size
n2 <- 200 # experimental dataset size
# nc <- 100 # number of centers
# cheating_pct <- 15
# for now, we have 100 centers
# centers 1 to 85 do not show cheating
# centers 86 to 100 show cheating
scale_factor <- 23
cheating_probvec1 <- c(rep(1, 85), rep(scale_factor, 15)) / sum(c(rep(1, 85), rep(scale_factor, 15)))
cheating_probvec2 <- c(rep(1, 85), rep(scale_factor * 2, 15)) / sum(c(rep(1, 85), rep(scale_factor * 2, 15)))
normal_probvec <- c(rep(scale_factor, 85), rep(1, 15)) / sum(c(rep(scale_factor, 85), rep(1, 15)))
# sampling a single center for cheating
# sample(1:100, 1, prob = cheating_probvec1)
# sampling a single center for non-cheating
# sample(1:100, 1000, replace = TRUE, prob = normal_probvec)
### irt model based simulated data
irt_dat <- rmvlogis(n1, params)
irt_df <- as.data.frame(irt_dat) %>%
as_tibble() %>%
mutate(center = sample(1:100, n1, replace = TRUE, prob = normal_probvec))
## all items cheating
sapply(1:n2, function(x) {
diff_corrects <- rbinom(10, 1, .9)
easy_incorrects <- rbinom(10, 1, .1)
respvec <- c(diff_corrects, easy_incorrects)
}) %>%
t() %>%
as.data.frame() %>%
as_tibble() %>%
mutate(center = sample(1:100, n2, replace = TRUE, prob = cheating_probvec2)) -> hard_easy_df
## hard items have cheating info, easy items random answers
sapply(1:n2, function(x) {
diff_corrects <- rbinom(10, 1, .9) # difficult corrects stays
easy_incorrects <- rbinom(10, 1, .5) # random answering
respvec <- c(diff_corrects, easy_incorrects)
}) %>%
t() %>%
as.data.frame() %>%
as_tibble() %>%
mutate(center = sample(1:100, n2, replace = TRUE, prob = cheating_probvec1)) -> hard_random_df
## easy items have cheating info, hard items random answers
sapply(1:n2, function(x) {
diff_corrects <- rbinom(10, 1, .5) # random answering
easy_incorrects <- rbinom(10, 1, .1) # easy incorrect stays
respvec <- c(diff_corrects, easy_incorrects)
}) %>%
t() %>%
as.data.frame() %>%
as_tibble() %>%
mutate(center = sample(1:100, n2, replace = TRUE, prob = cheating_probvec1)) -> random_easy_df
## all random answers
sapply(1:n2, function(x) {
diff_corrects <- rbinom(10, 1, .5) # random answering
easy_incorrects <- rbinom(10, 1, .5) # random answering
respvec <- c(diff_corrects, easy_incorrects)
}) %>%
t() %>%
as.data.frame() %>%
as_tibble()  %>%
mutate(center = sample(1:100, n2, replace = TRUE, prob = normal_probvec)) -> random_random_df
## combining
bind_rows(
irt_df,
hard_easy_df,
hard_random_df,
random_easy_df,
random_random_df
) -> export_rdf
table(random_random_df$center)
irt_df %>%
mutate(x = center > 85) %>%
count(x)
hard_easy_df %>%
mutate(x = center > 85) %>%
count(x)
hard_random_df %>%
mutate(x = center > 85) %>%
count(x)
random_easy_df %>%
mutate(x = center > 85) %>%
count(x)
write_csv(export_rdf, file = "cheating_sim.csv")
x=datagen()
y=answercopy(x$rdf,x$itr_rdf)
z=tableconverter(x$rdf,x$itr_rdf,y$common_correct,y$common_incorrect_sameoptions,y$common_incorrect_differentoptions,y$differentoptions)
View(z)
View(z %>% filter(sid1==sid2))
View(z %>% filter(sid1!=sid2))
y=answercopy(x$rdf,x$itr_rdf)
View(y)
load_all()
y=answercopy(x$rdf,x$itr_rdf)
z=tableconverter(x$rdf,x$itr_rdf,y$common_correct,y$common_incorrect_sameoptions,y$common_incorrect_differentoptions,y$differentoptions)
View(z)
load_all()
z=tableconverter(x$rdf,x$itr_rdf,y$common_correct,y$common_incorrect_sameoptions,y$common_incorrect_differentoptions,y$differentoptions)
View(z)
load+all()\
load_all()\
library(devtools)
load_all()
dfd=ltmgen()
load_all()
dfd=ltmgen()
dfd %>% mutate(sid=row_number())
dfd=dfd %>% mutate(sid=row_number())
optimal_k_index_response_similarity(dfd,1:20,tibble(copier_id=1,source_id=2))
cov(c(1,2,3),c(2,3,4,5))
cov(c(1,2,3),c(2,3,4))
cor(c(1,2,3),c(2,3,4))
optimal_k_index_response_similarity(dfd,1:20,tibble(copier_id=1,source_id=2))
optimal_k_index_response_similarity(dfd,1:20,tibble(copier_id=1,source_id=3))
optimal_k_index_response_similarity(dfd,1:20,tibble(copier_id=1,source_id=4))
load_all()
ltmgen()
dfd1=ltmgentable(ltmgen())
ltmgen()
load_all()
dfd1=ltmgentable(ltmgen())
dfd1=ltmgentable(ltmgen())
warnigs()
warnigs()
warnigs()
warnigs()
warnigs()
warnigs()
#' @export
ltmgentable<-function(itr_rdf){
sid1=0
sid2=0
centno=0
kindex=0
df=tibble(sid1,sid2,centno,kindex)
x=1
for(r in sort(unique(itr_rdf$center) )){
counter<-itr_rdf %>% filter(center==r)
for(i in unique(counter$sid)){
for(j in unique(counter$sid)){
cat("going",r," ",x)
sid1=i
sid2=j
centno=r
kindex=optimal_k_index_response_similarity(itr_rdf,1:20,tibble(copier_id=i,source_id=j))$k.index
x=x+1
y=tibble(sid1,sid2,centno,kindex)
df=df %>% bind_rows(y)
cat("\n")
}
}
}
df=df %>% filter(sid1!=sid2)
return(df)
}
load_all()
dfd1=ltmgentable(ltmgen())
dfd1=ltmgentable(dfd)
View(dfd1)
View(dfd1 %>% filter(kindex>0.8))
View(dfd1 %>% filter(kindex>0.8))
devtools::document()
demotable_ltm=dfd1
demotable=z
usethis::use_data(demotable,demotable_ltm,internal=T)
devtools::document()
load_all()
usethis::use_data(demotable,demotable_ltm,internal=T,overwrite=T)
load_all()
load_All()
load_all()
devtools::document()
devtools::document()
load_all()
usethis::use_data(demotable,demotable_ltm,internal=T,overwrite=T)
usethis::use_data
